@using BudgetSplit.Core.Models
@using BudgetSplit.New.Data
@using Microsoft.EntityFrameworkCore
@using BudgetSplit.New.Pages.Components
@inject ApplicationDbContext _context

<AutoCompleteNew @ref="_autoComplete" T="Category" @bind-Value="Value" SearchFunc="@Search1" Dense="true"
ToStringFunc=@(e => e == null ? "" : $"{e.Name} - {e.Description}")>
    <ItemTemplate Context="e">
        <MudText>
            @e.Name - @e.Description
        </MudText>
    </ItemTemplate>
    <ItemSelectedTemplate Context="e">
        <MudText>
            @e.Name - @e.Description
        </MudText>
    </ItemSelectedTemplate>
    <PopoutFooter>
        <MudButton OnClick="OpenDialog" Variant="Variant.Text" Color="Color.Primary">
            New Category
        </MudButton>
    </PopoutFooter>
</AutoCompleteNew>

<MudDialog @bind-IsVisible="_createDialogVisible">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3"/> Create Category
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12" sm="6" md="6">
                <MudTextField @bind-Value="@_editingItem.Name" Label="Category"/>
            </MudItem>
            <MudItem xs="12" sm="6" md="6">
                <MudTextField @bind-Value="@_editingItem.Description" Label="Description"/>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateItem" Class="px-10">Add</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="CancelCreate" Class="px-10">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private AutoCompleteNew<Category>? _autoComplete;

    private Category _editingItem = new Category();

    private bool _createDialogVisible;

    private Category? _value;
    [Parameter]
    public Category? Value { get => _value; set
        {
            if (_value == value)
                return;
            _value = value;
            ValueChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<Category?> ValueChanged { get; set; }

    private void OpenDialog()
    {
        _editingItem = new Category();
        _createDialogVisible = true;
    }

    private async Task<IEnumerable<Category>> Search1(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return await _context.Categories.ToListAsync();
        return await _context.Categories.Where(x => x.Name.Contains(value)).ToListAsync();
    }

    private async Task CreateItem()
    {
        _context.Categories.Add(_editingItem);
        await _context.SaveChangesAsync();
        Value = _editingItem;
        _editingItem = new Category();
        _createDialogVisible = false;
        await _autoComplete.SelectOption(Value);
        StateHasChanged();
    }

    private void CancelCreate()
    {
        _createDialogVisible = false;
    }
}
