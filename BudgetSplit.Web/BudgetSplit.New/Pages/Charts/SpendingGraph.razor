@using BudgetSplit.New.Data
@using System.Globalization
@inherits OwningComponentBase<ApplicationDbContext>

<div>
    <RadzenChart >
        @if (_periodData != null)
        {
            <RadzenColumnSeries Data="@_periodData" CategoryProperty="Name" Title="Income" LineType="LineType.Dashed" ValueProperty="Income" />
            <RadzenColumnSeries Data="@_periodData" CategoryProperty="Name" Title="Expenses" ValueProperty="Expenses" />
        }
        <RadzenValueAxis Formatter="@FormatCurrency">
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Amount" />
        </RadzenValueAxis>
        <RadzenCOlumnOptions Radius="5" />
    </RadzenChart>
</div>
<MudText Typo="Typo.h6">Selected portion of the chart: @Index</MudText>

@code {
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.

    private ApplicationDbContext _context => Service;

    List<PeriodResult> _periodData;

    protected override async Task OnParametersSetAsync()
    {
        await Refresh();
    }

    string FormatCurrency(object value)
    {
        if (value is double dbl)
        {
            return dbl.ToString("C");
        }
        return "";
    }

    public async Task Refresh()
    {
        var now = DateTime.Now;
        DateTime startDate = new DateTime(now.Year - 1, now.Month, 1);
        var results = _context.Transactions.Where(t => t.TransactionDate > startDate)
        .GroupBy(t =>
        new {
            Month = t.TransactionDate.Month,
            Year = t.TransactionDate.Year,

        })
        .Select(g => new
        {
            g.Key.Year,
            g.Key.Month,
            Total = g.Where(t => t.Amount < 0).Sum(t => t.Amount),
            Income = g.Where(t => t.Amount > 0).Sum(t => t.Amount)
        });

        ChartOptions options = new ChartOptions();

        List<PeriodResult> periodData = new List<PeriodResult>();


        foreach (var periodResult in results)
        {
            var start = new DateTime(periodResult.Year, periodResult.Month, 1);
            periodData.Add(new PeriodResult(start, start.AddMonths(1) - TimeSpan.FromDays(1), periodResult.Total * -1, periodResult.Income, start.ToString("MMM")));
        }

        _periodData = periodData;

        StateHasChanged();
    }

    public class PeriodResult
    {
        public DateTime From { get; set; }
        public DateTime To { get; set; }
        public decimal Expenses { get; set; }
        public decimal Income { get; set; }

        public string Name { get; set; }

        public PeriodResult(DateTime from, DateTime to, decimal expenses, decimal income, string name)
        {
            From = from;
            To = to;
            Expenses = expenses;
            Income = income;
            Name = name;
        }
    }
}